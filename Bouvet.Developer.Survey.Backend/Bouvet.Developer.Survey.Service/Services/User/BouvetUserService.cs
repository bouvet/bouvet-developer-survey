using Bouvet.Developer.Survey.Domain.Entities.Bouvet;
using Bouvet.Developer.Survey.Infrastructure.Data;
using Bouvet.Developer.Survey.Service.Interfaces.User;
using Microsoft.EntityFrameworkCore;
using System;
using System.Threading.Tasks;

namespace Bouvet.Developer.Survey.Service.Services.User
{
    public class BouvetUserService : IBouvetUserService
    {
        private readonly BouvetSurveyContext _context;

        public BouvetUserService(BouvetSurveyContext context)
        {
            _context = context;
        }

        public async Task<BouvetUser> GetOrCreateUserAsync(string respondId, int bouvetSurveyId)
        {
            if (string.IsNullOrWhiteSpace(respondId))
            {
                throw new ArgumentException("RespondId cannot be null or whitespace.", nameof(respondId));
            }

            var existingUser = await _context.Users
                                             .FirstOrDefaultAsync(u => u.RespondId == respondId && u.SurveyId == bouvetSurveyId);

            if (existingUser != null)
            {
                return existingUser;
            }

            var surveyExists = await _context.Surveys.AnyAsync(s => s.Id == bouvetSurveyId);
            if (!surveyExists)
            {
                throw new InvalidOperationException($"BouvetSurvey with ID {bouvetSurveyId} not found. Cannot create user for non-existent survey.");
            }

            var newUser = new BouvetUser
            {
                RespondId = respondId,
                SurveyId = bouvetSurveyId,
                // Id will be generated by Guid.NewGuid() by default
            };

            _context.Users.Add(newUser); // Or _context.BouvetUsers.Add(newUser);
            await _context.SaveChangesAsync();

            return newUser;
        }
    }
}