permissions:
  id-token: write
  contents: read

name: Build and deploy frontend to production
on:
  workflow_dispatch: # manual trigger
    branches:
      - main
      - 169-next-auth
    paths:
      - 'frontend/**'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 'Azure login'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # client-id: 2f3f1b63-3f3d-4389-bf65-c43d09ff8aa5
          # tenant-id: c317fa72-b393-44ea-a87c-ea272e8d963d
          # subscription-id: dd8c1770-d4ea-4f83-b049-3a23bebe076e

      - name: Enable ACR Admin Account
        run: |
          az acr update -n bouvetSurveyContainerRegistryProd --admin-enabled true

      - name: Get ACR name
        id: getacrname
        run: |
          acrName=$(az acr list --resource-group ${{ secrets.AZURE_RG_PROD }} --query "[0].name" -o tsv)
          echo "ACR_NAME=$acrName" >> $GITHUB_ENV

      - name: Get ACR Credentials
        id: getacrcreds
        run: |
          loginServer=$(az acr list --resource-group ${{ secrets.AZURE_RG_PROD }} --query "[0].loginServer" -o tsv)
          loginName=$(az acr credential show -n ${{ env.ACR_NAME }} --resource-group ${{ secrets.AZURE_RG_PROD }} --query username -o tsv)
          password=$(az acr credential show -n ${{ env.ACR_NAME }} --resource-group ${{ secrets.AZURE_RG_PROD }} --query "passwords[0].value" -o tsv)
          echo "LOGIN_SERVER=$loginServer" >> $GITHUB_ENV
          echo "LOGIN_NAME=$loginName" >> $GITHUB_ENV
          echo "PASSWORD=$password" >> $GITHUB_ENV

      - name: Retrieve Custom Domain from backend container app
        id: get_custom_domain
        run: |
          # Fetch the custom domain using Azure CLI
          CUSTOM_DOMAIN=$(az containerapp show --name bds-prod-containerapp-api --resource-group ${{ secrets.AZURE_RG_PROD }} --query "properties.configuration.ingress.customDomains[0].name" -o tsv)
          # Check if custom domain is found
          if [ -z "$CUSTOM_DOMAIN" ]; then
            echo "Custom domain not found. Failing the pipeline."
            exit 1  # Exit with error if no custom domain is found
          fi

          # Set environment variable for the custom domain
          BACKEND_URL="https://${CUSTOM_DOMAIN}/api"
          echo "BACKEND_URL=${BACKEND_URL}" >> $GITHUB_ENV
          echo "Retrieved backend custom domain: $CUSTOM_DOMAIN"

      - name: Build and Push Frontend Image to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.LOGIN_SERVER }}
          username: ${{ env.LOGIN_NAME }}
          password: ${{ env.PASSWORD }}
      - run: |
          az acr login --name ${{ env.ACR_NAME }} 
          docker build -f frontend/Dockerfile ./frontend -t ${{ env.LOGIN_SERVER }}/frontend-image:${{ github.sha }} --build-arg NEXT_PUBLIC_API_URL=${{env.BACKEND_URL}} --build-arg NEXTAUTH_URL=https://survey.bouvetapps.io/ --build-arg AZURE_AD_CLIENT_ID=2f3f1b63-3f3d-4389-bf65-c43d09ff8aa5 --build-arg AZURE_AD_TENANT_ID=${{ secrets.AZURE_AD_TENANT_ID }} --build-arg AZURE_SUBSCRIPTION_ID=dd8c1770-d4ea-4f83-b049-3a23bebe076e --build-arg SKIP_KEYVAULT_FETCH=true
          docker push ${{ env.LOGIN_SERVER }}/frontend-image:${{ github.sha }}
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Update Container App Image
        run: |
          az containerapp update \
            --name bds-prod-containerapp-frontend \
            --resource-group ${{ secrets.AZURE_RG_PROD }} \
            --image ${{ env.LOGIN_SERVER }}/frontend-image:${{ github.sha }}

      - name: Get Container App URL
        run: |
          fqdn=$(az containerapp show -n bds-prod-containerapp-frontend -g ${{ secrets.AZURE_RG_PROD }} --query properties.configuration.ingress.fqdn -o tsv)
          echo "Container App is deployed at: https://$fqdn"
